/*!
 *  ULTRAVIEWER 2.4.1 by @tdiprima - https://github.com/tdiprima/multi-viewer
 */
function Color(elem){let picker=new CP(elem);picker.self.classList.add('no-alpha');picker.on('blur',function(){});picker.on('focus',function(){});picker.on('change',function(r,g,b){this.source.value=this.color(r,g,b,1);this.source.innerHTML=this.color(r,g,b,1);this.source.style.backgroundColor=this.color(r,g,b,1)});picker.source.addEventListener('click',function(e){picker.enter();e.stopPropagation()},!1);document.documentElement.addEventListener('click',function(){picker.exit()},!1)}
let demo=function(){}
demo.execute=function(num_viewers,prod,options){const arr=[];const style="dragonbox";const iiif=window.location.origin+"/iiif/?iiif=/tcgaseg";const id="blca/TCGA-2F-A9KO-01Z-00-DX1.195576CF-B739-4BD9-B15B-4A70AE287D3E";if(!options){options={filterOn:!0,slidersOn:!0,toolbarOn:!0,multipleOn:!0,paintbrushColor:"#0ff",viewerOpts:{showFullPageControl:!1,showHomeControl:!0,showZoomControl:!1}}
if(num_viewers===1){options={filterOn:!0,slidersOn:!0,toolbarOn:!1,multipleOn:!1,paintbrushColor:"#0ff"}}}
for(let i=0;i<num_viewers;i++){let v=new nViewer("viewer"+i,style,"viewers",options);arr.push(v)}
new Dropdown(arr,'selections','./json/tcga.json');function test(){let dzi="//openseadragon.github.io/example-images/duomo/duomo.dzi";arr.forEach(function(elem){elem.getViewer().open(dzi)})}
function live(){arr.forEach(function(elem){elem.setSources([iiif+"/tcgaimages/"+id+".svs/info.json",iiif+"/featureimages/"+id+"-featureimage.tif/info.json"],[1.0,1.0])})}
if(prod){live()}else{test()}
sync=new Synchronizer(arr)}
class Dropdown{constructor(viewerArray,divId,dataSource){const cancertypes=["blca","brca","cesc","gbm","luad","lusc","paad","prad","skcm","ucec"];const maindiv=document.getElementById(divId);const iiif=window.location.origin+"/iiif/?iiif=/tcgaseg";let cancerSelect={};let imageSelect={};let data={};initialize();let hasOwnProperty=Object.prototype.hasOwnProperty;function isEmpty(obj){if(obj==null)return!0;if(obj.length>0)return!1;if(obj.length===0)return!0;if(typeof obj!=="object")return!0;for(var key in obj){if(hasOwnProperty.call(obj,key))return!1}
return!0}
function initialize(){let getSlideData=async function(){return(await fetch(dataSource)).json()};let x=getSlideData();x.then(function(result){data=result;if(!isEmpty(data)){initTypes();initImages()}})}
function selectCancerType(){let val=cancerSelect.value;imageSelect.options.length=0;let nl=data[val];for(let i=0;i<nl.length;i++){let option=document.createElement("option");option.text=nl[i].id;imageSelect.add(option)}
console.log("You selected: "+val+" which has "+imageSelect.options.length+" images");selectImage()}
function imageExists(image_url){let http=new XMLHttpRequest();http.open('HEAD',image_url,!1);http.send();return http.status!==404}
function selectImage(){let cVal=cancerSelect.value;let iVal=imageSelect.value;console.log("setting viewer to image : "+iVal);let ti=iiif+"/tcgaimages/"+cVal+"/"+iVal+".svs/info.json";let si=iiif+"/featureimages/"+cVal+"/"+iVal+"-featureimage.tif/info.json";if(imageExists(ti)){viewerArray.forEach(function(elem){elem.getViewer().open([ti,si])})}else{alert('Image does not exist\n'+ti);return!1}}
function initTypes(){let d=document.createDocumentFragment();let newDiv=document.createElement("div");newDiv.innerHTML="Type&nbsp;";d.appendChild(newDiv);cancerSelect=document.createElement('select');cancerSelect.id="cancertype";cancertypes.forEach(function(item){let opt=document.createElement('option');opt.innerHTML=item;opt.value=item;cancerSelect.appendChild(opt)});cancerSelect.addEventListener("change",selectCancerType);newDiv.appendChild(cancerSelect);maindiv.appendChild(d)}
function initImages(){let images=data[cancertypes[0]];if(typeof images!=='undefined'){let d=document.createDocumentFragment();let newDiv=document.createElement("div");newDiv.innerHTML="Image&nbsp;";d.appendChild(newDiv);imageSelect=document.createElement("select");imageSelect.id="imageids";images.forEach(function(item){let opt=document.createElement('option');opt.innerHTML=item.id;opt.value=item.id;imageSelect.appendChild(opt)});imageSelect.addEventListener("change",selectImage);newDiv.appendChild(imageSelect);maindiv.appendChild(d)}}}}
map_marker=function(currentViewer,syncedViewers){$(currentViewer.element).on('contextmenu',function(event){event.preventDefault()});currentViewer.addHandler('canvas-nonprimary-press',(event)=>{if(event.button===2){const webPoint=event.position;const viewportPoint=currentViewer.viewport.pointFromPixel(webPoint);document.querySelectorAll('#toggle-overlay').forEach(function(item){item.style.display='block'});displayPinIcon(viewportPoint)}});function createLink(){let link=document.createElement('a');let href="#";link.href=href;link.dataset.href=href;link.id='map-marker';link.className='fa fa-map-marker';link.style.cssText=' text-decoration: none; font-size: 22px; color: red;'+' cursor: pointer';return link}
function doOverlay(point,viewer){let link=createLink();viewer.addOverlay({element:link,location:point,placement:'BOTTOM',checkResize:!1});mouseTracker(link,viewer)}
function displayPinIcon(point){const all=!0;if(all){syncedViewers.forEach(function(item){let viewer=item.getViewer()
if(viewer.id===currentViewer.id){return}
doOverlay(point,viewer)})}else{doOverlay(point,currentViewer)}}
function mouseTracker(link,viewer){new OpenSeadragon.MouseTracker({element:link,clickHandler:function(){console.log('clickHandler')},dragHandler:function(){console.log('dragHandler')}})}
let elementList=document.querySelectorAll('#toggle-overlay');elementList.forEach(function(elem){let overlay=!1;let s,h;elem.addEventListener('click',function(){if(overlay){s='block';h="<i class=\"fa fa-map-marker\"></i> Hide markers"}else{s='none';h="<i class=\"fa fa-map-marker\"></i> Show markers"}
this.innerHTML=h;document.querySelectorAll('#map-marker').forEach(function(thing){thing.style.display=s})
overlay=!overlay})})}
function markupTools(idx,viewer){const overlay=viewer.fabricjsOverlay({scale:1000});const canvas=overlay.fabricCanvas();const btnGrid=document.getElementById('btnGrid'+idx);const btnPolygon=document.getElementById('btnPolygon'+idx);const btnDraw=document.getElementById('btnDraw'+idx);function clearClassList(element){let classList=element.classList;while(classList.length>0){classList.remove(classList.item(0))}}
function toggleButton(btn){let isOn=btn.classList.contains('btnOn');clearClassList(btn);if(isOn){btn.classList.add('btn')}else{btn.classList.add('btnOn')}}
let cellX=[],cellY=[];const sizeOfBox=50;const width=canvas.width;const numBoxes=(width/sizeOfBox);for(let imoX=0;imoX<numBoxes;imoX++){cellX[imoX+1]=imoX*sizeOfBox}
for(let imoY=0;imoY<numBoxes;imoY++){cellY[imoY+1]=imoY*sizeOfBox}
let gridAdded=!1;function makeLine(coords){return new fabric.Line(coords,{stroke:"#ccc",strokeWidth:2,selectable:!1})}
function mouseCoords(e){let pointer=e.absolutePointer;let ctx=viewer.drawer.context;let cx=pointer.x;let cy=pointer.y;let x=cx/sizeOfBox;let y=cy/sizeOfBox;let imoX=Math.ceil(x+0.001);let imoY=Math.ceil(y+0.001);ctx.fillStyle="red";ctx.fillRect(cellX[imoX],cellY[imoY],sizeOfBox,sizeOfBox)}
btnGrid.addEventListener('click',function(){gridAdded=!1;for(let i=0;i<numBoxes;i++){canvas.add(makeLine([i*sizeOfBox,0,i*sizeOfBox,width]));canvas.add(makeLine([0,i*sizeOfBox,width,i*sizeOfBox]))}
gridAdded=!0});let btnMarker=document.getElementById('btnMarker'+idx);btnMarker.addEventListener('click',markerHandler);function markerHandler(){if(btnMarker.classList.contains('btnOn')){canvas.off("mouse:move",mouseCoords);btnMarker.innerHTML="Activate marker"}else{if(!gridAdded){alert("Add a grid first!")}else{canvas.on("mouse:move",mouseCoords);btnMarker.innerHTML="Marker activated"}}
toggleButton(btnMarker)}
let roof=new fabric.Polyline();let roofPoints=[];let lines=[];let lineCounter=0;let drawingObject={type:'',background:'',border:''};function Point(x,y){this.x=x;this.y=y}
function isRealValue(obj){return obj&&obj!=='null'&&obj!=='undefined'}
btnPolygon.addEventListener('click',function(){toggleButton(btnPolygon);if(drawingObject.type==="roof"){drawingObject.type="";lines.forEach(function(value){canvas.remove(value)});roof=makeRoof(roofPoints);canvas.add(roof);canvas.renderAll()}else{drawingObject.type="roof"}});let x=0;let y=0;canvas.on('mouse:dblclick',finishPolygon);function finishPolygon(){toggleButton(btnPolygon);drawingObject.type="";lines.forEach(function(value){canvas.remove(value)});roof=makeRoof(roofPoints);if(Array.isArray(roof.points)&&roof.points.length){canvas.add(roof);canvas.renderAll()}
roofPoints=[];lines=[];lineCounter=0;viewer.gestureSettingsMouse.clickToZoom=!0}
function canvasSelect(){canvas.selection=!0}
function addPoints(options){viewer.gestureSettingsMouse.clickToZoom=!1;if(drawingObject.type==="roof"){canvas.selection=!1;setStartingPoint(options);roofPoints.push(new Point(x,y));let points=[x,y,x,y];lines.push(new fabric.Line(points,{strokeWidth:3,selectable:!1,stroke:'red'}));canvas.add(lines[lineCounter]);lineCounter++;canvas.on('mouse:up',canvasSelect)}else{viewer.gestureSettingsMouse.clickToZoom=!0;overlay._fabricCanvas.selection=!1}}
canvas.on('mouse:down',addPoints);function calculateLines(options){if(isRealValue(lines[0])&&drawingObject.type==="roof"){setStartingPoint(options);lines[lineCounter-1].set({"x2":x,"y2":y});canvas.renderAll()}}
canvas.on('mouse:move',calculateLines);canvas.on("after:render",function(){canvas.calcOffset()});function setStartingPoint(options){x=options.e.pageX-canvas._offset.left;y=options.e.pageY-canvas._offset.top}
function makeRoof(roofPoints){let left=findPaddingForRoof(roofPoints,'x');let top=findPaddingForRoof(roofPoints,'y');if(left!==999999&&top!==999999){roofPoints.push(new Point(roofPoints[0].x,roofPoints[0].y));roof=new fabric.Polyline(roofPoints,{strokeWidth:3,fill:'rgba(0,0,0,0)',stroke:'green'});roof.set({left:left,top:top,})}
return roof}
function findPaddingForRoof(roofPoints,coord){let result=999999;for(let i=0;i<lineCounter;i++){if(roofPoints[i][coord]<result){result=roofPoints[i][coord]}}
return Math.abs(result)}
const paintBrush=overlay.fabricCanvas().freeDrawingBrush;const mark=document.getElementById('mark'+idx);paintBrush.color=mark.innerHTML;function customizeControls(obj){obj.hasControls=!1;obj.lockMovementX=!0;obj.lockMovementY=!0;function addDeleteBtn(x,y,el){$(".deleteBtn").remove();let btnLeft=x-10;let btnTop=y-10;let deleteBtn=document.createElement('img');deleteBtn.src="./img/delete-icon.png";deleteBtn.classList.add('deleteBtn')
deleteBtn.style=`position:absolute;top:${btnTop}px;left:${btnLeft}px;cursor:pointer;width:20px;height:20px;`;deleteBtn.alt="delete object";el.appendChild(deleteBtn)}
canvas.on('selection:created',function(e){let el=this.lowerCanvasEl.parentElement;addDeleteBtn(e.target.oCoords.tr.x,e.target.oCoords.tr.y,el)})
canvas.on('mouse:down',function(){if(!canvas.getActiveObject()){$(".deleteBtn").remove();viewer.gestureSettingsMouse.clickToZoom=!0}else{viewer.gestureSettingsMouse.clickToZoom=!1}});canvas.on('object:modified',function(e){let el=this.lowerCanvasEl.parentElement;addDeleteBtn(e.target.oCoords.tr.x,e.target.oCoords.tr.y,el)});canvas.on('object:scaling',function(){$(".deleteBtn").remove()});canvas.on('object:moving',function(){$(".deleteBtn").remove()});canvas.on('object:rotating',function(){$(".deleteBtn").remove()});$(".canvas-container").on('click',".deleteBtn",function(){if(canvas.getActiveObject()){canvas.remove(canvas.getActiveObject());$(".deleteBtn").remove()}
viewer.gestureSettingsMouse.clickToZoom=!0})}
function saveCoordinates(d){}
function setBrushWidth(viewer){paintBrush.width=10/viewer.viewport.getZoom(!0)}
function toggleDraw(v,btn,c){let mouseTracker=v.outerTracker;if(btn.classList.contains('btnOn')){v.setMouseNavEnabled(!0);mouseTracker.setTracking(!0);c.isDrawingMode=!1}else{v.setMouseNavEnabled(!1);mouseTracker.setTracking(!1);c.isDrawingMode=!0}
toggleButton(btn)}
btnDraw.addEventListener('click',function(){paintBrush.color=mark.innerHTML;setBrushWidth(viewer);toggleDraw(viewer,btnDraw,canvas)});canvas.on("path:created",function(e){toggleDraw(viewer,btnDraw,canvas);let d=e.path;customizeControls(d);saveCoordinates(d)})}
class nViewer{constructor(viewerDivId,cssName,mainDiv,options){let idx=viewerDivId.replace("viewer","");let myFilter={};let sliders=[];let chkPan={};let chkZoom={};let viewer={};mainDiv=document.getElementById(mainDiv);setFilter();setViewer();this.getViewer=function(){return viewer};this.getChkPan=function(){return chkPan.checked};this.getChkZoom=function(){return chkZoom.checked};this.getViewer=function(){return viewer};this.setSources=function(imageArray,opacityArray){imageArray.forEach(function(image,index){viewer.addTiledImage({tileSource:image,opacity:opacityArray?opacityArray[index]:0,x:0,y:0})});viewer.world.addHandler("add-item",function(data){if(viewer.world.getItemCount()===2){viewer.setFilterOptions({filters:[{items:viewer.world.getItemAt(1),processors:[myFilter.prototype.COLORIZE(0,255,0)]}]});viewer.world.getItemAt(1).source.getTileUrl=function(level,x,y){let IIIF_ROTATION='0',scale=Math.pow(0.5,this.maxLevel-level),levelWidth=Math.ceil(this.width*scale),levelHeight=Math.ceil(this.height*scale),tileSize,iiifTileSize,iiifTileSizeWidth,iiifTileSizeHeight,iiifRegion,iiifTileX,iiifTileY,iiifTileW,iiifTileH,iiifSize,iiifQuality,uri;tileSize=this.getTileWidth(level);iiifTileSize=Math.ceil(tileSize/scale);iiifTileSizeHeight=iiifTileSize;iiifTileSizeWidth=iiifTileSize;iiifQuality="default.png";if(levelWidth<tileSize&&levelHeight<tileSize){iiifSize=levelWidth+",";iiifRegion='full'}else{iiifTileX=x*iiifTileSizeWidth;iiifTileY=y*iiifTileSizeHeight;iiifTileW=Math.min(iiifTileSizeWidth,this.width-iiifTileX);iiifTileH=Math.min(iiifTileSizeHeight,this.height-iiifTileY);iiifSize=Math.ceil(iiifTileW*scale)+",";iiifRegion=[iiifTileX,iiifTileY,iiifTileW,iiifTileH].join(',')}
uri=[this['@id'],iiifRegion,iiifSize,IIIF_ROTATION,iiifQuality].join('/');return uri}}})};function setControls(div){let d=document.createDocumentFragment();let dd=document.createElement('div');if(options.slidersOn){let len=2;for(let i=0;i<len;i++){let range=document.createElement('input');range.type="range";range.id="sliderRange"+i;range.min="0";range.max="100";range.value="100";range.setAttribute('class',"slider-square");if(options.toolbarOn){range.style.display="none"}
dd.appendChild(range);d.appendChild(dd);div.appendChild(d);sliders.push(range)}}
if(options.toolbarOn){new Toolbar(div,idx,sliders,options).menu();if(options.multipleOn){chkPan=document.getElementById("chkPan"+idx);chkZoom=document.getElementById("chkZoom"+idx)}}}
function setViewer(){let diva=document.createElement('div');diva.setAttribute('class','nViewer');mainDiv.appendChild(diva);setControls(diva);let div=document.createElement('div');div.id=viewerDivId;div.setAttribute('class',cssName);diva.appendChild(div);if(!options.viewerOpts){options.viewerOpts={showFullPageControl:!0,showHomeControl:!0,showZoomControl:!0}}
viewer=OpenSeadragon({id:viewerDivId,showFullPageControl:options.viewerOpts.showFullPageControl,showHomeControl:options.viewerOpts.showHomeControl,prefixUrl:"./js/lib/openseadragon/images/",showZoomControl:options.viewerOpts.showZoomControl,crossOriginPolicy:'Anonymous'});if(options.toolbarOn){new markupTools(idx,viewer)}
if(options.slidersOn){for(let i=0;i<sliders.length;i++){sliders[i].addEventListener("input",function(){if(viewer.world.getItemAt(i)!==undefined){viewer.world.getItemAt(i).setOpacity(sliders[i].value/100)}else{sliders[i].hidden=!0}})}}
if(options.filterOn){viewer.setFilterOptions({filters:[{items:viewer.world.getItemAt(1),processors:[myFilter.prototype.COLORIZE(0,255,0)]}]})}}
function setFilter(){myFilter=OpenSeadragon.Filters.GREYSCALE;myFilter.prototype.COLORIZE=function(r,g,b){return function(context,callback){let imgData=context.getImageData(0,0,context.canvas.width,context.canvas.height);let pixels=imgData.data;for(let i=0;i<pixels.length;i+=4){let avg=pixels[i]/255;if(pixels[i+3]===255){pixels[i]=r*avg;pixels[i+1]=g*avg;pixels[i+2]=b*avg;pixels[i+3]=avg*255}else if(pixels[i]>0){pixels[i+3]=0}}
context.putImageData(imgData,0,0);callback()}}}}}
class Synchronizer{constructor(viewerArray){let syncedViewers=[];let activeViewerId=null;viewerArray.forEach(function(elem){let currentViewer=elem.getViewer();currentViewer.addHandler('pan',handler);currentViewer.addHandler('zoom',handler);map_marker(currentViewer,syncedViewers);function handler(){if(activeViewerId==null){activeViewerId=currentViewer.id}
if(activeViewerId!==currentViewer.id){return}
syncedViewers.forEach(function(item){let view=item.getViewer()
if(view.id===currentViewer.id){return}
if(item.getChkPan()&&elem.getChkPan()){view.viewport.panTo(currentViewer.viewport.getCenter())}
if(item.getChkZoom()&&elem.getChkZoom()){view.viewport.zoomTo(currentViewer.viewport.getZoom())}});activeViewerId=null}
syncedViewers.push(elem)})}}
function Toolbar(div,idx,sliders,options){let div1=document.createElement('div');let innerHtml;let color="#00f";if(options.paintbrushColor){color=options.paintbrushColor}
if(options.multipleOn){innerHtml=`<input type="checkbox" id="chkPan${idx}" checked><label for="chkPan${idx}">Match Pan</label>&nbsp;&nbsp;
    <input type="checkbox" id="chkZoom${idx}" checked><label for="chkZoom${idx}">Match Zoom</label>&nbsp;&nbsp;`}else{innerHtml=''}
innerHtml+=`<a data-page="fold${idx}" href="#"><i class="fa fa-list-alt" aria-hidden="true"></i> Menu</a>`
this.menu=function name(){innerHtml+=`<div class="fold scrollmenu" id="fold${idx}" style="max-width:400px;margin:0 auto;">
        <a href="#"><mark id="mark${idx}" style="background-color: rgb(0, 255, 255);">#00ffff</mark></a>
        <a id="btnDraw${idx}" class="btn" href="#"><i class="fa fa-pencil-alt"></i> Draw</a>
        <a id="btnPolygon${idx}" class="btn" href="#"><i class="fa fa-draw-polygon"></i> Draw polygon</a>
        <a id="btnGrid${idx}" class="btn" href="#"><i class="fa fa-draw"></i> Draw grid</a>
        <a id="btnMarker${idx}" class="btn" href="#"><i class="fa fa-draw"></i> Activate marker</a>
        <a id="btnSlide${idx}" class="btn" href="#"><i class="fa fa-sliders"></i> Show sliders</a>
        <a id="toggle-overlay" style="display: none" href="#"><i class="fa fa-map-marker-alt"></i> Hide markers</a>
    </div>`;div1.innerHTML=innerHtml;div.appendChild(div1);$("a").on('click',function(){let page=$(this).data("page");if(typeof page==="undefined")
return;let ind=page.trim(-1).replace("fold","");if(ind===idx){if($('div:animated').id!==page){let active=$(".fold.active");if(active.length){active.animate({width:"0"},200).animate({height:"0"},100,function(){$(this).removeClass("active")})}else{$("#"+page).addClass("active").animate({height:"75px"},100,'linear').animate({width:"500px"},100,'linear')}}}});sliderEvt();colorDrawEvt()}
this.buttons=function(){let btnSlide=`<button class="btn" id="btnSlide${idx}"><i class="fa fa-sliders"></i> Show sliders</button>&nbsp;&nbsp;`;let wPaint=`<mark id='mark${idx}'>${options.paintbrushColor}</mark>&nbsp;&nbsp;`;let btnDraw=`<button class="btn" id="btnDraw${idx}"><i class="fa fa-pencil-alt"></i> Draw</button>&nbsp;&nbsp;`;let btnMapMarker=`<button class="btn" id="toggle-overlay" style="display: none"><i class="fa fa-map-marker"></i> Hide markers</button>&nbsp;&nbsp;`;let btnPolygon=`<button class="btn" id="btnPolygon${idx}"><i class='fas fa-draw-polygon'></i> Draw Polygon</button>&nbsp;&nbsp;`;let btnGrid=`<button class="btn" id="btnGrid${idx}">Draw Grid&nbsp;&nbsp;`;div1.innerHTML=innerHtml+wPaint+btnDraw+(options.slidersOn?btnSlide:"")+btnPolygon+btnGrid+btnMapMarker;div.appendChild(div1);sliderEvt();colorDrawEvt()}
function temp(){document.getElementById("btnPolygon"+idx).addEventListener('click',function(){alert("Coming real soon!")});document.getElementById('btnGrid'+idx).addEventListener('click',function(){alert("Coming real soon!")})}
function colorDrawEvt(){new Color(document.getElementById('mark'+idx))}
function sliderEvt(){if(options.slidersOn){let sld=document.getElementById("btnSlide"+idx);if(sld!==null){sld.addEventListener('click',function(){let x=sliders[0];if(x.style.display==='none'){x.style.display='inline';sliders[1].style.display='inline';this.innerHTML="<i class=\"fa fa-sliders\"></i> Hide sliders"}else{x.style.display='none';sliders[1].style.display='none';this.innerHTML="<i class=\"fa fa-sliders\"></i> Show sliders"}})}}}}